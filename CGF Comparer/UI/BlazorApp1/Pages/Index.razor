@page "/"
@using System.Text.Json;
@using System.Text;
@using ComparerLibrary;
@inject HttpClient Http

<div class="fileinfo">
    <div class="sourceinfo">
        <span class="title">Source</span>
        <div class="fileSearch">  
            <p class="file-name">@sourceFileName</p>
            <label for="sourceUpload" class="input-label">Browse</label>
            <InputFile class="sr-only" type="file" id="sourceUpload" OnChange="@UploadSource" />
        </div>
    @if (allData.SourceMetaInfo.Count < 1 || isSourceFileRequired)
    {
        <p></p>
    }
    else
    {    
        @foreach(var line in allData.SourceMetaInfo)
        {
            <p class="sourceLine">@line.ID: @line.Value</p>    
        }    
    }
    </div>

    <div class="targetinfo">
        <span class="title">Target</span>        
            <div class="fileSearch">
                <p class="file-name">@targetFileName</p>
                <label for="targetUpload" class="input-label">Browse</label>
            <InputFile class="sr-only" type="file" id="targetUpload" OnChange="@UploadTarget" disabled="@isSourceFileRequired" />
            </div>      
    @if (isSourceFileRequired || isTargetFileRequired)
    {
        <p></p>
    }
    else
    {
        @foreach (var line in allData.TargetMetaInfo)
        {
                <p class="sourceLine">@line.ID: @line.Value</p>
        }
    }
    </div>
</div>


<div class="dataAndFilters">
<div class="filterChoices">    
    <span class="title">Results</span> 
        @if (isTargetFileRequired || isSourceFileRequired)
        {

            
            <input type="text"  @oninput="HandleInput" @bind="searchText" placeholder="Search by ID" disabled />
            <p>Target file required</p>
            <div class="checkboxes" disabled>
        <div>
            <input type="checkbox" @bind="removedChecked" id="removed" @oninput="HandleInput2" disabled />
            <label for="removed">Removed</label>
        </div>
        <div>
            <input type="checkbox" @bind="unchangedChecked" id="unchanged" @oninput="HandleInput3" disabled/>
            <label for="unchanged">Unchanged</label>
        </div>
        <div>
        <input type="checkbox" @bind="modifiedChecked" id="modified" @oninput="HandleInput4" disabled/>
        <label for="modified">Modified</label>
        </div>
        <div>
            <input type="checkbox" @bind="addedChecked" id="added" @oninput="HandleInput5" disabled/>
            <label for="added">Added</label>
        </div>
                
            </div>
            
        }
        else
        {
            <input type="text" @oninput="HandleInput" @bind="searchText" placeholder="Search by ID" />
            <div class="checkboxes" disabled>
                <div>
                    <input type="checkbox" @bind="removedChecked" id="removed" @oninput="HandleInput2" />
                    <label for="removed">Removed</label>
                </div>
                <div>
                    <input type="checkbox" @bind="unchangedChecked" id="unchanged" @oninput="HandleInput3" />
                    <label for="unchanged">Unchanged</label>
                </div>
                <div>
                    <input type="checkbox" @bind="modifiedChecked" id="modified" @oninput="HandleInput4" />
                    <label for="modified">Modified</label>
                </div>
                <div>
                    <input type="checkbox" @bind="addedChecked" id="added" @oninput="HandleInput5" />
                    <label for="added">Added</label>
                </div>
            </div>
        }

</div>

@if (allData == null || !allData.ComparedData.Any() || isSourceFileRequired || isTargetFileRequired)
{
    
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Source</th>
                <th>Target</th>
                <th>Result</th>
            </tr>            
        </thead>
        <tbody>
            <tr><td>No data</td></tr>
        </tbody>
        </table>
}
else
{
    <div class="table-container">    
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Source</th>
                <th>Target</th>
                <th>Result</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach (var item in filteredData)
            {
                <tr style="background-color: @(GetColor(item.Type.ToString()))">
                    <td>@item.ID</td>
                    <td>@item.SourceValue</td>
                    <td>@item.TargetValue</td>
                    <td>@item.Type</td>
                </tr>
            }
        </tbody>
        
    </table>
    </div>
    
}
</div>


@code {
    private CfgModel allData = new();
    private List<DataComparisonItem> filteredData;    
    string myValue;
    string[] filters;
    string[] sourceInfo = new string[0];
    string[] targetInfo = new string[0];
    private string searchText ;
    private List<string> selectedFilters = new List<string>(){"Added","Unchanged","Removed","Modified"};
    private bool removedChecked = true;
    private bool unchangedChecked = true;
    private bool modifiedChecked=true;
    private bool addedChecked=true;
    private string sourceFileName = "Select a file";
    private string targetFileName = "Select a source file first";   
    private bool isSourceFileRequired = true;
    private bool isTargetFileRequired = true;    
    IBrowserFile? sourceFile;
    IBrowserFile? targetFile;

    private async Task CompareFilesAsync()
    {   
        if (sourceFile == null || targetFile == null)
        {
            return;
        }

        var formData = new MultipartFormDataContent();
        formData.Add(new StreamContent(sourceFile.OpenReadStream()), "sourceFile", sourceFile.Name);
        formData.Add(new StreamContent(targetFile.OpenReadStream()), "targetFile", targetFile.Name);

        var response = await Http.PostAsync("https://localhost:7219/api/CfgComparer/UploadAndCompareFiles", formData);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CfgModel>();
            allData = result;
            await UpdateSearch();
        }
        else
        {
            return;
        }    
    }
    private async Task UploadSource(InputFileChangeEventArgs e)
    {

        var file = e.File;
        var extension = Path.GetExtension(file.Name);

        if (file != null && extension ==".cfg")
        {            
            isSourceFileRequired = false;
            isTargetFileRequired = true;
            sourceFile = e.File;
            sourceFileName = file.Name;
            targetFileName = "Select a file";
            StateHasChanged();
        }
        else
        {
            isSourceFileRequired = true;
            sourceFileName = "Invalid file";
        }
    }
    private async Task UploadTarget(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var extension = Path.GetExtension(file.Name);

        if (file != null && extension ==".cfg")
        {
            targetFile = e.File;
            targetFileName = file.Name;
            isTargetFileRequired = false;
            StateHasChanged();

            if (sourceFile != null && targetFile != null)
            {
                await CompareFilesAsync();
            }
        }
        else
        {
            isTargetFileRequired = true;
        }
    }


    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        await UpdateSearch();
    }
    private async Task HandleInput2(ChangeEventArgs e)
    {
        removedChecked = (bool)e.Value;
        HandleCheckboxChange("Removed", removedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput3(ChangeEventArgs e)
    {
        unchangedChecked = (bool)e.Value;
        HandleCheckboxChange("Unchanged", unchangedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput4(ChangeEventArgs e)
    {
        modifiedChecked = (bool)e.Value;
        HandleCheckboxChange("Modified", modifiedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput5(ChangeEventArgs e)
    {
        addedChecked = (bool)e.Value;
        HandleCheckboxChange("Added", addedChecked);

        await UpdateSearch();
    }
    private async Task UpdateSearch()
    {        
        await GetAll(searchText,selectedFilters);
    }    

    


    private void HandleCheckboxChange(string filter, bool isChecked)
    {
        if (isChecked)
        {
            selectedFilters.Add(filter);
        }
        else
        {
            selectedFilters.Remove(filter);
        }
    }  

    private async Task GetAll(string id = "", IEnumerable<string> filters = null)
    {
        string apiUrl = "https://localhost:7219/api/CfgComparer/FilterByIdResults";
        using var httpClient = new HttpClient();        
        var content = new StringContent(JsonSerializer.Serialize(allData), Encoding.UTF8, "application/json");        
        var queryString = $"?id={id}&filters={(string.Join("&filters=", filters ?? Enumerable.Empty<string>()))}";
        var requestUrl = apiUrl + queryString;
        var response = await httpClient.PostAsync(requestUrl, content);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            try
            {
                filteredData = JsonSerializer.Deserialize<List<DataComparisonItem>>(jsonString,new JsonSerializerOptions
                    {
                    PropertyNameCaseInsensitive = true
                });
            }
            catch (JsonException ex)
            {                
                Console.WriteLine($"Error deserializing JSON: {ex.Message}");                
            }           
        }
        else if(!response.IsSuccessStatusCode)
        {
            filteredData = new List<DataComparisonItem>();

            return;
        }
        else
        {
            return;
        }
    }    

    private string GetColor(string type)
    {
        switch (type)
        {
            case "Unchanged":
                return "#DCDCDC";
            case "Added":
                return "#98FB98";
            case "Modified":
                return "#FFFFE0";
            case "Removed":
                return "#FFCCCC";
            default:
                return "gray";
        }
    }   

    protected override async Task OnInitializedAsync()
    {
        
    }    
}

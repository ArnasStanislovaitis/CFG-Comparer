@page "/"
@using System.Text.Json;
@using System.Text;
@inject HttpClient Http

<div class="fileinfo">
    <div class="sourceinfo">
        <span class="title">Source</span>
        <div class="fileSearch">  
            <p class="file-name">@sourceFileName</p>
            <label for="sourceUpload" class="input-label">Browse</label>
            <InputFile class="sr-only" type="file" id="sourceUpload" OnChange="@UploadSource" />
        </div>
    @if (allData.SourceMetaInfo.Count < 1 || isSourceFileRequired)
    {
        <p>@allData.SourceMetaInfo.Count</p>
    }
    else
    {    
        @foreach(var line in allData.SourceMetaInfo)
        {
            <p class="sourceLine">@line.ID: @line.Value</p>    
        }    
    }
    </div>

    <div class="targetinfo">
        <span class="title">Target</span>        
            <div class="fileSearch">
                <p class="file-name">@targetFileName</p>
                <label for="targetUpload" class="input-label">Browse</label>
            <InputFile class="sr-only" type="file" id="targetUpload" OnChange="@UploadTarget" disabled="@isSourceFileRequired" />
            </div>      
    @if (isSourceFileRequired || isTargetFileRequired)
    {
        <p></p>
    }
    else
    {
        @foreach (var line in allData.TargetMetaInfo)
        {
                <p class="sourceLine">@line.ID: @line.Value</p>
        }
    }
    </div>
</div>


<div class="dataAndFilters">
<div class="filterChoices">    
    <span class="title">Results</span> 
        @if (isTargetFileRequired || isSourceFileRequired)
        {

            
            <input type="text"  @oninput="HandleInput" @bind="searchText" placeholder="Search by ID" disabled />
<p>Target file required</p>
            <div class="checkboxes" disabled>
                <div>
            <input type="checkbox" @bind="removedChecked" id="removed" @oninput="HandleInput2" disabled />
            <label for="removed">Removed</label>
        </div>
        <div>
            <input type="checkbox" @bind="unchangedChecked" id="unchanged" @oninput="HandleInput3" disabled/>
            <label for="unchanged">Unchanged</label>
        </div>
        <div>
        <input type="checkbox" @bind="modifiedChecked" id="modified" @oninput="HandleInput4" disabled/>
        <label for="modified">Modified</label>
        </div>
        <div>
            <input type="checkbox" @bind="addedChecked" id="added" @oninput="HandleInput5" disabled/>
            <label for="added">Added</label>
        </div>
                
            </div>
            
        }
        else
        {
            <input type="text" @oninput="HandleInput" @bind="searchText" placeholder="Search by ID" />
            <div class="checkboxes" disabled>
                <div>
                    <input type="checkbox" @bind="removedChecked" id="removed" @oninput="HandleInput2" />
                    <label for="removed">Removed</label>
                </div>
                <div>
                    <input type="checkbox" @bind="unchangedChecked" id="unchanged" @oninput="HandleInput3" />
                    <label for="unchanged">Unchanged</label>
                </div>
                <div>
                    <input type="checkbox" @bind="modifiedChecked" id="modified" @oninput="HandleInput4" />
                    <label for="modified">Modified</label>
                </div>
                <div>
                    <input type="checkbox" @bind="addedChecked" id="added" @oninput="HandleInput5" />
                    <label for="added">Added</label>
                </div>
            </div>
        }

</div>

@if (allData == null || !allData.ComparedData.Any() || isSourceFileRequired || isTargetFileRequired)
{
    
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Source</th>
                <th>Target</th>
                <th>Result</th>
            </tr>            
        </thead>
        <tbody>
            <tr><td>No data</td></tr>
        </tbody>
        </table>
}
else
{
    <div class="table-container">    
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Source</th>
                <th>Target</th>
                <th>Result</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach (var item in allData2)
            {
                <tr style="background-color: @(GetColor(item.Type.ToString()))">
                    <td>@item.ID</td>
                    <td>@item.SourceValue</td>
                    <td>@item.TargetValue</td>
                    <td>@item.Type</td>
                </tr>
            }
        </tbody>
        
    </table>
    </div>
    
}
</div>


@code {
    private CfgModel allData = new();
    private List<DataComparisonItem> allData2;
    string myValue;
    string[] filters;
    string[] sourceInfo = new string[0];
    string[] targetInfo = new string[0];
    private string searchText ;
    private bool removedChecked =true ;
    private bool unchangedChecked = true;
    private bool modifiedChecked = true;
    private bool addedChecked= true  ;
    private string sourceFileName = "Select a file";
    private string targetFileName = "Select a source file first";
    //List<string> selectedFilters = new List<string>();
    private bool isSourceFileRequired = true;
    private bool isTargetFileRequired = true;
    int bimbim = 0;
    IBrowserFile? sourceFile;
    IBrowserFile? targetFile;


    private async Task CompareFilesAsync()
    {        

        if (sourceFile == null || targetFile == null)
        {
            // Handle the case where one or both files are not selected
            return;
        }


        // Create the form data to be sent to the server
        var formData = new MultipartFormDataContent();
        formData.Add(new StreamContent(sourceFile.OpenReadStream()), "sourceFile", sourceFile.Name);
        formData.Add(new StreamContent(targetFile.OpenReadStream()), "targetFile", targetFile.Name);

        // Make the POST request to the server
        var response = await Http.PostAsync("https://localhost:7219/api/CfgComparer/UploadAndCompareFiles", formData);

        if (response.IsSuccessStatusCode)
        {
            // Process the response, which contains the compared data in the body
            var result = await response.Content.ReadFromJsonAsync<CfgModel>();
            allData = result;
            bimbim = result.SourceMetaInfo.Count();
            await UpdateSearch();
            // Do something with the 'result' data
        }
        else
        {
            // Handle the case where the request was not successful
            // You can check the response.StatusCode for the specific status code returned
        }
    }
    public async void UploadSource(InputFileChangeEventArgs e)
    {

        var file = e.File;
        var extension = Path.GetExtension(file.Name);
        if (file != null && extension ==".cfg")
        {            
            isSourceFileRequired = false;
            isTargetFileRequired = true;
            sourceFile = e.File;
            sourceFileName = file.Name;
            targetFileName = "Select a file";
            StateHasChanged();

        }
        else
        {
            isSourceFileRequired = true;
            sourceFileName = "Invalid file";
        }        

        //Console.WriteLine(file.ContentType);
        //var a = JsonSerializer.Serialize(file);
        //var p = await Http.PostAsJsonAsync("https://localhost:7219/api/CfgComparer/UploadSource", a);
        //Console.Write(p.StatusCode);
    }
    private async Task UploadTarget(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var extension = Path.GetExtension(file.Name);
        
        if (file != null && extension ==".cfg")
        {
            targetFile = e.File;
            targetFileName = file.Name;
            isTargetFileRequired = false;
            StateHasChanged();

            // Check if both files are selected and call the comparison method
            if (sourceFile != null && targetFile != null)
            {
                await CompareFilesAsync();
            }
        }
    }


    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        await UpdateSearch();
    }
    private async Task HandleInput2(ChangeEventArgs e)
    {
        //searchText = e.Value.ToString();
        removedChecked = (bool)e.Value;
        HandleCheckboxChange("Removed", removedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput3(ChangeEventArgs e)
    {
        //searchText = e.Value.ToString();
        unchangedChecked = (bool)e.Value;
        HandleCheckboxChange("Unchanged", unchangedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput4(ChangeEventArgs e)
    {
        //searchText = e.Value.ToString();
        modifiedChecked = (bool)e.Value;
        HandleCheckboxChange("Modified", modifiedChecked);

        await UpdateSearch();
    }
    private async Task HandleInput5(ChangeEventArgs e)
    {
        //searchText = e.Value.ToString();
        addedChecked = (bool)e.Value;
        HandleCheckboxChange("Added", addedChecked);

        await UpdateSearch();
    }
    private async Task UpdateSearch()
    {
        //var a = GetSelectedFilters();
        await GetAll(searchText,selectedFilters);
    }

    // Helper method to get the selected filters
    private List<string> GetSelectedFilters()
    {
        //var selectedFilters = new List<string>();

        if (removedChecked)
        {
            selectedFilters.Add("removed");
        }
        if (unchangedChecked)
        {
            selectedFilters.Add("unchanged");
        }
        if (modifiedChecked)
        {
            selectedFilters.Add("modified");
        }
        if (addedChecked)
        {
            selectedFilters.Add("added");
        }

        return selectedFilters;
    }


    private List<string> selectedFilters = new List<string>(){"Added","Unchanged","Removed","Modified"};


    private void HandleCheckboxChange(string filter, bool isChecked)
    {
        if (isChecked)
        {
            selectedFilters.Add(filter);
        }
        else
        {
            selectedFilters.Remove(filter);
        }
    }

    public async void HandleSubmit(string id)
    {        
        //allData = await Http.GetFromJsonAsync<ModelCFG[]>($"https://localhost:7219/api/CfgComparer/FilterById/{id}");

    }

    /*
    public async void UploadSource(InputFileChangeEventArgs e)
    {

    var file = e.File;
    var response = await Http.PostAsync("https://localhost:7219/api/CfgComparer/UploadSource", new MultipartFormDataContent
    {
    { new StreamContent(file.OpenReadStream()), "file", file.Name }
    });
    if (response.IsSuccessStatusCode)
    {
    sourceInfo = await response.Content.ReadFromJsonAsync<string[]>();
    isSourceFileRequired = false;
    isTargetFileRequired = true;
    sourceFileName = file.Name;  
    targetFileName = "Select a file";
    }
    else if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
    {
    isSourceFileRequired = true;
    sourceFileName = "Invalid file";
    }
    else
    {
    isSourceFileRequired = true;
    }
    StateHasChanged();
    //Console.WriteLine(file.ContentType);
    //var a = JsonSerializer.Serialize(file);
    //var p = await Http.PostAsJsonAsync("https://localhost:7219/api/CfgComparer/UploadSource", a);
    //Console.Write(p.StatusCode);
    }
    */
    public async void UploadTarget2(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var response = await Http.PostAsync("https://localhost:7219/api/CfgComparer/UploadTarget", new MultipartFormDataContent
    {
        { new StreamContent(file.OpenReadStream()), "file", file.Name }
    });


        if (response.IsSuccessStatusCode)
        {            
            targetInfo = await response.Content.ReadFromJsonAsync<string[]>();
            isTargetFileRequired = false;
            targetFileName = file.Name;  
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            isTargetFileRequired = true;
            targetFileName = "Invalid file";            
        }
        else
        {
            isTargetFileRequired = true;
            targetFileName = "Select a file";            
        }
        StateHasChanged();        


        //var p = await Http.PostAsJsonAsync("https://localhost:7219/api/CfgComparer/UploadTarget", file);
    }

    /*
    public async void GetAll(string id = "")
    {
    allData = await Http.GetFromJsonAsync<ModelCFG[]>($" https://localhost:7219/api/CfgComparer/FilterByIdResults?id=50&filters=unchanged&filters=modified&filters=added&filters=removed");
    }*/
    /*
    public async Task<CfgModel> GetAll(string id = "", IEnumerable<string> filters = null)
    {
    string jsonString = JsonSerializer.Serialize<CfgModel>(allData);

    string apiUrl = "https://localhost:7219/api/CfgComparer/FilterByIdAndResults";
    //var response = await Http.PostAsJsonAsync<CfgModel>(apiUrl + "?id=" + id);

    // Prepare the HttpContent with the request body data
    //HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

    using var httpClient = new HttpClient();
    using var content = new StringContent(JsonSerializer.Serialize<CfgModel>(allData), Encoding.UTF8, "application/json");
    //var response = await httpClient.PostAsync($"{apiUrl}?id={id}&filters={string.Join(",", filters)}", content);


    var response = await Http.PostAsJsonAsync("https://localhost:7219/api/CfgComparer/FilterByIdResults?id=50&filters=Added", content);    

        if (response.IsSuccessStatusCode)
        {
        allData = await response.Content.ReadFromJsonAsync<CfgModel>();
        return allData;
        }
        else
        {
        return new CfgModel();
        // Or you can throw an exception here as before.
    }
    }*/
    public async Task<CfgModel> GetAll(string id = "", IEnumerable<string> filters = null)
    {
        string apiUrl = "https://localhost:7219/api/CfgComparer/FilterByIdResults";

        using var httpClient = new HttpClient();

        // Prepare the HttpContent with the request body data
        var content = new StringContent(JsonSerializer.Serialize(allData), Encoding.UTF8, "application/json");

        // Construct the URL with query parameters
        var queryString = $"?id={id}&filters={(string.Join("&filters=", filters ?? Enumerable.Empty<string>()))}";
        var requestUrl = apiUrl + queryString;

        var response = await httpClient.PostAsync(requestUrl, content);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            try
            {
                allData2 = JsonSerializer.Deserialize<List<DataComparisonItem>>(jsonString, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true // Use this if the JSON property names are in different casing.
                    });
                return allData;
            }
            catch (JsonException ex)
            {
                // Log or handle the exception here.
                Console.WriteLine($"Error deserializing JSON: {ex.Message}");
                return new CfgModel(); // Or throw an exception if preferred.
            }

            return allData;
        }
        else if(!response.IsSuccessStatusCode)
        {
            allData2 = new List<DataComparisonItem>();
            

            return allData;
        }
        else
        {
            return new CfgModel();
            // Or you can throw an exception here as before.
        }
    }

    public async void GetAll2(string id = "", IEnumerable<string> filters = null)
    {
        string baseUrl = "https://localhost:7219/api/CfgComparer/FilterByIdResults";

        // Construct the URL with the provided ID (if any) and filters (if any)
        string url = baseUrl;
        if (!string.IsNullOrEmpty(id))
        {
            url += $"?id={id}";
        }

        if (filters != null && filters.Any())
        {
            string filtersQuery = string.Join("&", filters.Select(filter => $"filters={filter}"));
            if (url.Contains('?'))
            {
                url += $"&{filtersQuery}";
            }
            else
            {
                url += $"?{filtersQuery}";
            }
        }

        // Fetch data from the URL
        //var data = await Http.GetFromJsonAsync<ModelCFG[]>(url);
        var a = await Http.GetAsync(url);
        if (a.IsSuccessStatusCode)
        {
            allData = await a.Content.ReadFromJsonAsync<CfgModel>();     
            //return allData;
        }
        else
        {
            allData =  new CfgModel();
            //return allData;
            throw new Exception($"Error getting data. Status code: {a.StatusCode}");
        }

        /*
        var b = a.Result;
        allData = a.
        if (data == null || !data.Any())
            {
            allData = new ModelCFG[1];
        }
        allData = await Http.GetFromJsonAsync<ModelCFG[]>(url);
        return allData;*/
    }

    private string GetColor(string type)
    {
        switch (type)
        {
            case "Unchanged":
                return "#DCDCDC";
            case "Added":
                return "#98FB98";
            case "Modified":
                return "#FFFFE0";
            case "Removed":
                return "#FFCCCC";
            default:
                return "gray";
        }
    }   

    protected override async Task OnInitializedAsync()
    {
        //allData = await Http.GetFromJsonAsync<CfgModel>("https://localhost:7219/api/CfgComparer");
        //allData = await Http.GetFromJsonAsync<ModelCFG[]>($"https://localhost:7219/api/CfgComparer/FilterByIdResults?filters=unchanged&filters=modified&filters=added");
    }

    public class CfgModel
    {
        public CfgModel()
        {
            
        }
        public List<FileMetaInfo> SourceMetaInfo { get; set; } = new();
        public List<FileMetaInfo> TargetMetaInfo { get; set; } = new();
        public List<DataComparisonItem> ComparedData { get; set; } = new();
    }

    public class DataComparisonItem
    {
        public DataComparisonItem() { }
        public string ID { get; set; }
        public string SourceValue { get; set; } = string.Empty;
        public string TargetValue { get; set; } = string.Empty;
        public ResultsType Type { get; set; }
    }
    public class FileMetaInfo
    {
        public string ID { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
    public enum ResultsType
    {
        Unchanged,
        Added,
        Modified,
        Removed
    }

}
